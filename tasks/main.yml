# We want to install python-crypto directly and not as a dependency,
# because we do smart things with paramiko installation below and it
# might be accidentally autoremoved.
- name: Install python-crypto
  apt: name=python-crypto

- name: Install duplicity
  apt: name=duplicity

# We install paramiko from pip, because the Debian version has some
# problems; notably later parmiko versions have improved on
# https://github.com/paramiko/paramiko/issues/17.
- name: Ensure paramiko deb is uninstalled
  apt: name=python-paramiko state=absent
- name: Install paramiko from pip
  pip: name=paramiko version=1.12.1

# Avoid the "no module gio" warning
- name: Install python-gobject
  apt: name=python-gobject

# Install gpg key
- name: Extract gpg key email from gpg public key
  shell: >
    echo '{{ gpg_pub_key|default("") }}' | gpg --with-fingerprint | head -n 1 |
    awk '{ print $NF }' | tr -d '<>\n'
  register: get_gpg_key_email
  changed_when: False
  always_run: yes

- name: Extract gpg key fingerprint from gpg public key
  shell: >
    echo '{{ gpg_pub_key|default("") }}' | gpg --with-fingerprint | grep fingerprint |
    awk -F= '{ print $2 }' | sed 's/ //g' | tr -d '\n'
  register: get_gpg_key_fingerprint
  changed_when: False
  always_run: yes

- name: Check if private gpg key is installed
  command: gpg --list-secret-keys {{ get_gpg_key_email.stdout }}
  register: gpg_priv_key_installed
  ignore_errors: True
  changed_when: False
  always_run: yes

- name: Import private gpg key
  shell: echo '{{ gpg_priv_key }}' | gpg --import -
  when: "gpg_priv_key_installed.rc != 0 and not duplicity_deactivate"

- name: Check if public gpg key is installed
  command: gpg --list-keys {{ get_gpg_key_email.stdout }}
  register: gpg_pub_key_installed
  ignore_errors: True
  changed_when: False
  always_run: yes

- name: Import public gpg key
  shell: echo '{{ gpg_pub_key }}' | gpg --import -
  when: "gpg_pub_key_installed.rc != 0 and not duplicity_deactivate"

- name: Check if public gpg key is trusted
  shell: >
    gpg --export-ownertrust|grep {{ get_gpg_key_fingerprint.stdout }}|
    grep -q ":6:"
  register: gpg_pub_key_is_trusted
  ignore_errors: True
  changed_when: False
  always_run: yes

- name: Trust public gpg key
  shell: >
    echo "{{ get_gpg_key_fingerprint.stdout }}:6:" | gpg --import-ownertrust
  when: "not duplicity_deactivate and gpg_pub_key_is_trusted.rc != 0"

# Create scripts and set them to run
- name: Create /etc/duplicity
  file: dest=/etc/duplicity state=directory

- name: Create /etc/duplicity/includes_excludes
  file: dest=/etc/duplicity/includes_excludes state=directory

- name: Create /etc/duplicity/pre
  file: dest=/etc/duplicity/pre state=directory

- name: Create /etc/duplicity/post
  file: dest=/etc/duplicity/post state=directory

- name: Specify base duplicity excludes
  copy: src=base_excludes dest=/etc/duplicity/includes_excludes/base

- name: Install custom_backup script
  template: src=custom_backup dest=/usr/local/sbin/custom_backup mode=700
  when: not duplicity_deactivate

- name: Install cron job
  template: src=cronjob dest=/etc/cron.d/duplicity mode=600
  when: not duplicity_deactivate
